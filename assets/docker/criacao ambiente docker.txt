=========== 51. criando rede docker spring-cloud-ms

> docker network create spring-cloud-ms-net

=========== 52. rodando ms-worker no profile dev com postgres

registro de imagens de docker https://hub.docker.com

- baixando versão 12 da imagem postgres no hub.docker.com

> docker pull postgres:12-alpine

----------------- DOCKER COMMANDS

- listando imagens locais
> docker images  

-- removendo imagens locais
> docker rmi {IMAGE_ID}

-- iniciando instancia
> docker start {CONTAINER_ID}

-- logs da instancia
> docker logs -f {REPO_NAME}


- rodando a imagem
> docker run -p 5432:5432 --name ms-workr-pg12 --network spring-cloud-ms-net -e POSTGRES_PASSWORD=1234567 -e POSTGRES_DB=db-ms-worker postgres:12-alpine

=========== 53 rodando ms-user no profile dev

- visualizando os containers em execução
> docker ps

- visualizando os containers em execução e parados
> docker ps -a

-- rodando uma nova instancia na porta externa 5433
> docker run -p 5433:5432 --name ms-user-pg12 --network spring-cloud-ms-net -e POSTGRES_PASSWORD=1234567 -e POSTGRES_DB=db-ms-user postgres:12-alpine

===========  54 trocando referencias de localhost para containers 

- link das alterações realizadas https://github.com/fopnet/spring-cloud-ms/commit/3f9971f427cfe13b04425048a3113c6835b8afd3

===========  55 Criando container de ms-config-server 

dentro do projeto config-server rodar 

export GITHUB_USER=fopnet
export GITHUB_PASS=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

./mvnw clean package

- vai gerar o arquivo ms-config-server-0.0.1-SNAPSHOT.jar dentro do target

-- criando o arquivo dockerfile na raiz do projeto com o conteúdo abaixo

FROM openjdk:11
VOLUME /tmp
EXPOSE 8888
ADD ./target/ms-config-server-0.0.1-SNAPSHOT.jar ms-config-server.jar
ENTRYPOINT ["java","-jar","/ms-config-server.jar"]

-- gerando imagem docker

> docker build -t ms-config-server:v1 .

-- levantando um container com essa imagem

> docker run -p 8888:8888 --name ms-config-server --network spring-cloud-ms-net -e GITHUB_USER=fopnet -e GITHUB_PASS=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 ms-config-server:v1

===========  56 Criando container de ms-eureka-server 

dentro do projeto eureka-server rodar 

./mvnw clean package

- vai gerar o arquivo eureka-server-0.0.1-SNAPSHOT.jar dentro do target

-- criando o arquivo dockerfile na raiz do projeto com o conteúdo abaixo

FROM openjdk:11
VOLUME /tmp
EXPOSE 8761
ADD ./target/eureka-server-0.0.1-SNAPSHOT.jar ms-eureka-server.jar
ENTRYPOINT ["java","-jar","/ms-eureka-server.jar"]

-- gerando imagem docker

> docker build -t ms-eureka-server:v1 .

-- levantando um container com essa imagem

> docker run -p 8761:8761 --name ms-eureka-server --network spring-cloud-ms-net ms-eureka-server:v1

===========  57. Container de ms-worker


dentro do projeto worker-ms rodar 

./mvnw clean package -DskipTests

- vai gerar o arquivo worker-0.0.1-SNAPSHOT.jar dentro do target

-- criando o arquivo dockerfile na raiz do projeto com o conteúdo abaixo

FROM openjdk:11
VOLUME /tmp
ADD ./target/worker-0.0.1-SNAPSHOT.jar ms-worker-server.jar
ENTRYPOINT ["java","-jar","/ms-worker-server"]

-- gerando imagem docker

> docker build -t ms-worker-server:v1 .

-- levantando um container com essa imagem em uma porta aleatória com parametro -P

> docker run -P --name ms-worker-server --network spring-cloud-ms-net ms-worker-server:v1

===========  58. Container de ms-user


dentro do projeto user-ms rodar 

./mvnw clean package -DskipTests

- vai gerar o arquivo user-0.0.1-SNAPSHOT.jar dentro do target

-- criando o arquivo dockerfile na raiz do projeto com o conteúdo abaixo

FROM openjdk:11
VOLUME /tmp
ADD ./target/user-0.0.1-SNAPSHOT.jar ms-user-server.jar
ENTRYPOINT ["java","-jar","/ms-user-server"]

-- gerando imagem docker

> docker build -t ms-user-server:v1 .

-- levantando um container com essa imagem em uma porta aleatória com parametro -P

> docker run -P --name ms-user-server --network spring-cloud-ms-net ms-user-server:v1

===========  59. Container de ms-payroll


dentro do projeto payroll-ms rodar 

./mvnw clean package -DskipTests

- vai gerar o arquivo payroll-0.0.1-SNAPSHOT.jar dentro do target

-- criando o arquivo dockerfile na raiz do projeto com o conteúdo abaixo

FROM openjdk:11
VOLUME /tmp
ADD ./target/payroll-0.0.1-SNAPSHOT.jar ms-payroll-server.jar
ENTRYPOINT ["java","-jar","/ms-payroll-server"]

-- gerando imagem docker

> docker build -t ms-payroll-server:v1 .

-- levantando um container com essa imagem em uma porta aleatória com parametro -P

> docker run -P --name ms-payroll-server --network spring-cloud-ms-net ms-payroll-server:v1

===========  60. Container de ms-auth


dentro do projeto payroll-ms rodar 

./mvnw clean package -DskipTests

- vai gerar o arquivo payroll-0.0.1-SNAPSHOT.jar dentro do target

-- criando o arquivo dockerfile na raiz do projeto com o conteúdo abaixo

FROM openjdk:11
VOLUME /tmp
ADD ./target/auth-0.0.1-SNAPSHOT.jar ms-auth-server.jar
ENTRYPOINT ["java","-jar","/ms-auth-server"]

-- gerando imagem docker

> docker build -t ms-auth-server:v1 .

-- levantando um container com essa imagem em uma porta aleatória com parametro -P

> docker run -P --name ms-auth-server --network spring-cloud-ms-net ms-auth-server:v1


===========  61. Container de ms-gateway-zuul


dentro do projeto gateway-zuul-ms rodar 

./mvnw clean package -DskipTests

- vai gerar o arquivo gateway-zuul-ms-0.0.1-SNAPSHOT.jar dentro do target

-- criando o arquivo dockerfile na raiz do projeto com o conteúdo abaixo

FROM openjdk:11
VOLUME /tmp
EXPOSE 8765
ADD ./target/api-gateway-zuul-ws-0.0.1-SNAPSHOT.jar api-gateway-zuul.jar
ENTRYPOINT ["java","-jar","/api-gateway-zuul.jar"]

-- gerando imagem docker

> docker build -t api-gateway-zuul-server:v1 .

-- levantando um container com essa imagem em uma porta aleatória com parametro -P

> docker run -p 8765:8765 --name api-gateway-zuul-server --network spring-cloud-ms-net api-gateway-zuul-server:v1




